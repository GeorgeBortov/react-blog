// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle addNewAccount 1`] = `
<Modal
  appElement={null}
  ariaHideApp={true}
  bodyOpenClassName="ReactModal__Body--open"
  className="modal"
  closeTimeoutMS={200}
  contentLabel="Confirmation Modal"
  isOpen={false}
  onRequestClose={[MockFunction]}
  parentSelector={[Function]}
  portalClassName="ReactModalPortal"
  shouldCloseOnEsc={true}
  shouldCloseOnOverlayClick={true}
  shouldFocusAfterRender={true}
  shouldReturnFocusAfterClose={true}
>
  <div
    className="modal__body"
  >
    <button
      className="modal__close"
      onClick={[MockFunction]}
    />
    <h3
      className="modal__title"
    >
      Do you want to sign in with a different account?
    </h3>
    <button
      className="button removeExpense"
      onClick={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    >
      Yes
    </button>
    <button
      className="button button--secondary"
      onClick={[MockFunction]}
    >
      No
    </button>
  </div>
</Modal>
`;

exports[`should handle onRequestClose with button "NO"  1`] = `
<Modal
  appElement={null}
  ariaHideApp={true}
  bodyOpenClassName="ReactModal__Body--open"
  className="modal"
  closeTimeoutMS={200}
  contentLabel="Confirmation Modal"
  isOpen={false}
  onRequestClose={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  parentSelector={[Function]}
  portalClassName="ReactModalPortal"
  shouldCloseOnEsc={true}
  shouldCloseOnOverlayClick={true}
  shouldFocusAfterRender={true}
  shouldReturnFocusAfterClose={true}
>
  <div
    className="modal__body"
  >
    <button
      className="modal__close"
      onClick={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    />
    <h3
      className="modal__title"
    >
      Do you want to sign in with a different account?
    </h3>
    <button
      className="button removeExpense"
      onClick={[MockFunction]}
    >
      Yes
    </button>
    <button
      className="button button--secondary"
      onClick={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    >
      No
    </button>
  </div>
</Modal>
`;

exports[`should handle onRequestClose with button "X"  1`] = `
<Modal
  appElement={null}
  ariaHideApp={true}
  bodyOpenClassName="ReactModal__Body--open"
  className="modal"
  closeTimeoutMS={200}
  contentLabel="Confirmation Modal"
  isOpen={false}
  onRequestClose={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  parentSelector={[Function]}
  portalClassName="ReactModalPortal"
  shouldCloseOnEsc={true}
  shouldCloseOnOverlayClick={true}
  shouldFocusAfterRender={true}
  shouldReturnFocusAfterClose={true}
>
  <div
    className="modal__body"
  >
    <button
      className="modal__close"
      onClick={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    />
    <h3
      className="modal__title"
    >
      Do you want to sign in with a different account?
    </h3>
    <button
      className="button removeExpense"
      onClick={[MockFunction]}
    >
      Yes
    </button>
    <button
      className="button button--secondary"
      onClick={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
    >
      No
    </button>
  </div>
</Modal>
`;

exports[`should render close ConfirmAuthModal correctly 1`] = `
<Modal
  appElement={null}
  ariaHideApp={true}
  bodyOpenClassName="ReactModal__Body--open"
  className="modal"
  closeTimeoutMS={200}
  contentLabel="Confirmation Modal"
  isOpen={false}
  onRequestClose={[MockFunction]}
  parentSelector={[Function]}
  portalClassName="ReactModalPortal"
  shouldCloseOnEsc={true}
  shouldCloseOnOverlayClick={true}
  shouldFocusAfterRender={true}
  shouldReturnFocusAfterClose={true}
>
  <div
    className="modal__body"
  >
    <button
      className="modal__close"
      onClick={[MockFunction]}
    />
    <h3
      className="modal__title"
    >
      Do you want to sign in with a different account?
    </h3>
    <button
      className="button removeExpense"
      onClick={[MockFunction]}
    >
      Yes
    </button>
    <button
      className="button button--secondary"
      onClick={[MockFunction]}
    >
      No
    </button>
  </div>
</Modal>
`;

exports[`should render open ConfirmAuthModal correctly 1`] = `
<Modal
  appElement={null}
  ariaHideApp={true}
  bodyOpenClassName="ReactModal__Body--open"
  className="modal"
  closeTimeoutMS={200}
  contentLabel="Confirmation Modal"
  isOpen={true}
  onRequestClose={[MockFunction]}
  parentSelector={[Function]}
  portalClassName="ReactModalPortal"
  shouldCloseOnEsc={true}
  shouldCloseOnOverlayClick={true}
  shouldFocusAfterRender={true}
  shouldReturnFocusAfterClose={true}
>
  <div
    className="modal__body"
  >
    <button
      className="modal__close"
      onClick={[MockFunction]}
    />
    <h3
      className="modal__title"
    >
      Do you want to sign in with a different account?
    </h3>
    <button
      className="button removeExpense"
      onClick={[MockFunction]}
    >
      Yes
    </button>
    <button
      className="button button--secondary"
      onClick={[MockFunction]}
    >
      No
    </button>
  </div>
</Modal>
`;
